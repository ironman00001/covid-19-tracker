{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.044c3bd4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\" ;\r\nimport numeral from \"numeral\" ;\r\nimport { Circle , Popup } from \"react-leaflet\" ; \r\nimport \"./Map.css\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 200,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 260,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 500,\r\n    },\r\n  };\r\n\r\n\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) =>{\r\n        if( a.cases > b.cases ){ return -1; }\r\n        else {return 1 ;}\r\n    }) ;\r\n\r\n    return sortedData ;\r\n};\r\n\r\n// draw circles on the map with interactive tooltip\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n       \r\n      <div className=\"info-container\">\r\n            <div\r\n                className=\"info-flag\"\r\n                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n            />\r\n            <div className=\"info-name\">{country.country}</div>\r\n            <div className=\"info-confirmed\">\r\n                Cases: {numeral(country.cases).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-recovered\">\r\n                Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-deaths\">\r\n                Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n            </div>\r\n      </div>\r\n\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n\r\n\r\n\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react' ; \r\nimport \"./Map.css\" ; \r\nimport { Map as LeafletMap , TileLayer } from \"react-leaflet\" ; \r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries , casesType , center,zoom}) {\r\n  return (\r\n    <div className=\"map\" >\r\n     <LeafletMap center={center} zoom ={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution ='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n\r\n          {/* Loop through adn draw circles on the screen */}\r\n \r\n          {showDataOnMap(countries,casesType)}\r\n    \r\n\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css' ; \r\nimport { prettyPrintStat } from \"./util\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            \r\n            {countries.map(({country,cases})=>(\r\n                \r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{prettyPrintStat(cases)}</strong></td>\r\n                </tr>\r\n\r\n            ))}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React ,{useState, useEffect } from \"react\"\nimport { MenuItem, FormControl, Select , Card, CardContent } from \"@material-ui/core\" ; \nimport './App.css';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData , prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\n\n\nfunction App() {\n\n  const [ countries , setCountries] = useState( [] );\n  const [ country , setCountry ] = useState(\"worldwide\");\n  const [ countryInfo , setCountryInfo ] = useState({});\n  const [ tableData , setTableData ] = useState([]);\n  const [mapCenter , setMapCenter] = useState({ lat: 34.80746 , lng: -40.4796 });\n  const [mapZoom , setMapZoom] = useState(3)\n  const [mapCountries , setMapCountries] = useState([]);\n  const [casesType , setCasesType ] = useState([\"cases\"]);\n\n\n\n\n\n\n\n\n\n\n\n  useEffect(() => {\n   \n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json() )\n    .then( data => {\n      setCountryInfo(data); \n\n    });\n\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data)=>{\n          const countries = data.map((country)=>({\n              name: country.country,           // united states ,United kingdom \n              value: country.countryInfo.iso2 // UK , USA , FR\n            }));\n            \n  \n           const sortedData = sortData(data);\n\n           setTableData(sortedData); \n           setMapCountries(data);\n           setCountries(countries); \n      });\n    };\n    getCountriesData(); \n  }, []) ;\n\n\n   const onCountryChange = (event) =>{\n     const countryCode = event.target.value ; \n     setCountry(countryCode);\n\n     const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}` ; \n\n      fetch(url)\n     .then( response => response.json() )\n     .then( data =>{\n         setCountry(countryCode) ; \n         setCountryInfo(data); \n\n         setMapCenter([data.countryInfo.lat , data.countryInfo.long]) ; \n         setMapZoom(4); \n     });\n  };\n\n\n\n\n\n\n\n\n  return (\n    \n    \n    <div className=\"app\"> \n         \n         <div className=\"app__left\">\n\n                                <div className =\"app__header\" >\n                                      <h1> Covid-19 TRACKER </h1>\n                                      <FormControl className =\"app__dropdown\">\n                                        <Select variant =\"outlined\"  onChange={onCountryChange} value = {country} >\n                                            \n                                            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                                            {countries.map( country =>( \n                                                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                                              ))}\n                                          \n                                        </Select>\n                                      </FormControl>\n                                  </div>\n\n\n                                <div className =\"app__stats\">\n\n                                    \n                                    <InfoBox isRed active = { casesType === \"cases\" } onClick={e=>setCasesType(\"cases\")}  title =\"Coronavirus Cases\"  cases = {prettyPrintStat(countryInfo.todayCases)}  total = {prettyPrintStat(countryInfo.cases)}/>\n                                    <InfoBox active = { casesType === \"recovered\" } onClick={e=>setCasesType(\"recovered\")} title =\"recovered\"  cases = {prettyPrintStat(countryInfo.todayRecovered)}  total = {prettyPrintStat(countryInfo.recovered)}/>\n                                    <InfoBox isRed active = { casesType === \"deaths\" } onClick={e=>setCasesType(\"deaths\")} title =\"Deaths\"  cases = {prettyPrintStat(countryInfo.todayDeaths)}  total = {prettyPrintStat(countryInfo.deaths)}/>\n                                \n                                \n                                </div>\n\n                                <Map \n                                   \n                                   casesType={casesType}\n                                   countries={mapCountries}\n                                   center ={mapCenter}\n                                   zoom ={mapZoom}\n\n                                /> \n\n         </div>\n\n         < Card className =\"app__right\"> \n         \n               <CardContent>\n\n\n                   <h3>Live Cases by country</h3>\n                   < Table countries ={tableData} />\n\n                   <h1 className=\"app__classTitle\"> Worldwide New Cases </h1>\n                   < LineGraph \n                    \n                      className=\"app__graph\"   \n                      casesType={casesType}\n                   \n                   />\n\n               </CardContent>\n\n         </Card>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}