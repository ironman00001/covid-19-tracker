{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\my covid tracker\\\\covid-19-tracker\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LineGraph() {\n  _s();\n\n  const [data, setData] = useState({});\n\n  const buildCharData = (data, casesType = 'cases') => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let dat in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: data,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    ;\n    return chartData;\n  };\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(response => response.json()).then(data => {\n      // clever stuff \n      console.log(data);\n      const charData = buildCharData(data);\n      setData(charData);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" I m a graph \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroudColor: \"rgba( 204, 16 ,53, 0\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"QZ3LmHH4AejxMVZ+vi9Ncdxt69U=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/my covid tracker/covid-19-tracker/src/LineGraph.js"],"names":["React","Line","useState","useEffect","LineGraph","data","setData","buildCharData","casesType","chartData","lastDataPoint","dat","cases","newDataPoint","x","y","date","push","fetch","then","response","json","console","log","charData","datasets","backgroudColor","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAEjB,QAAM,CAAEC,IAAF,EAASC,OAAT,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;;AAIA,QAAMK,aAAa,GAAG,CAACF,IAAD,EAAQG,SAAS,GAAG,OAApB,KAAiC;AACnD,UAAMC,SAAS,GAAG,EAAlB;AACA,QAAIC,aAAJ;;AAEA,SAAK,IAAIC,GAAT,IAAgBN,IAAI,CAACO,KAArB,EACA;AAEI,UAAGF,aAAH,EACA;AACI,cAAMG,YAAY,GAClB;AACIC,UAAAA,CAAC,EAACT,IADN;AAEIU,UAAAA,CAAC,EAACV,IAAI,CAACG,SAAD,CAAJ,CAAgBQ,IAAhB,IAAwBN;AAF9B,SADA;AAKAD,QAAAA,SAAS,CAACQ,IAAV,CAAeJ,YAAf;AACH;;AACDH,MAAAA,aAAa,GAAGL,IAAI,CAACG,SAAD,CAAJ,CAAgBQ,IAAhB,CAAhB;AACH;;AAAC;AAEF,WAAOP,SAAP;AAEH,GArBD;;AA0BJN,EAAAA,SAAS,CAAC,MAAK;AACXe,IAAAA,KAAK,CAAC,4DAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMd,IAAI,IAAI;AAEV;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,YAAMmB,QAAQ,GAAGjB,aAAa,CAAEF,IAAF,CAA9B;AACAC,MAAAA,OAAO,CAAEkB,QAAF,CAAP;AAEH,KAVD;AAWH,GAZQ,EAYL,EAZK,CAAT;AAsBI,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AACA,MAAA,IAAI,EAAI;AACJC,QAAAA,QAAQ,EAAE,CAAC;AAEPC,UAAAA,cAAc,EAAE,sBAFT;AAGPC,UAAAA,WAAW,EAAE,SAHN;AAIPtB,UAAAA,IAAI,EAAEA;AAJC,SAAD;AADN;AADR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAtEQD,S;;KAAAA,S;AAwET,eAAeA,SAAf","sourcesContent":["import React from 'react';\r\nimport { Line } from \"react-chartjs-2\" ; \r\nimport {useState, useEffect } from \"react\"\r\n\r\nfunction LineGraph() {\r\n   \r\n    const [ data , setData] = useState({}) ; \r\n\r\n\r\n\r\n    const buildCharData = (data , casesType = 'cases' ) => {\r\n        const chartData = [] ;\r\n        let lastDataPoint; \r\n    \r\n        for( let dat in data.cases )\r\n        {\r\n            \r\n            if(lastDataPoint)\r\n            {\r\n                const newDataPoint = \r\n                {\r\n                    x:data ,\r\n                    y:data[casesType][date] - lastDataPoint \r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date] ; \r\n        } ;\r\n    \r\n        return chartData ;\r\n    \r\n    }\r\n    \r\n    \r\n\r\n\r\nuseEffect(() =>{\r\n    fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n    .then(response => response.json() )\r\n    .then(data => {\r\n       \r\n        // clever stuff \r\n        console.log(data);\r\n\r\n        const charData = buildCharData( data ) ;\r\n        setData( charData ); \r\n\r\n    });\r\n} , []);\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1> I m a graph </h1>\r\n            <Line \r\n            data = {{\r\n                datasets: [{\r\n\r\n                    backgroudColor: \"rgba( 204, 16 ,53, 0\" ,\r\n                    borderColor: \"#CC1034\",\r\n                    data: data \r\n                },]\r\n            \r\n            \r\n            }}  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n"]},"metadata":{},"sourceType":"module"}