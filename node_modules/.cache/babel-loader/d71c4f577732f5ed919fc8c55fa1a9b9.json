{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\my covid tracker\\\\covid-19-tracker\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph() {\n  _s();\n\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType = 'cases') => {\n    const charData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        charData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return charData;\n  };\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => response.json()).then(data => {\n      // clever stuff here \n      const charData = buildChartData(data);\n      setData(charData);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" I am a graph \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204,16,52,0.5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"X5tDWfQRUCptvBWg/EzTkkRjsP0=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/my covid tracker/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","setData","buildChartData","casesType","charData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetch","then","response","json","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  \r\n\r\n\r\nfunction LineGraph() {\r\n   \r\n   const [ data , setData ] = useState({});\r\n   \r\n   const buildChartData = ( data , casesType ='cases' ) => \r\n   {\r\n    const charData = [] ;\r\n    let lastDataPoint ; \r\n      \r\n    for( let date in data.cases )\r\n        {\r\n        if(lastDataPoint)\r\n        {\r\n            const newDataPoint = {\r\n                x: date ,\r\n                y: data[casesType][date] - lastDataPoint  \r\n            }\r\n            charData.push(newDataPoint); \r\n        }\r\n        lastDataPoint = data[casesType][date] ;\r\n    }\r\n return charData ;\r\n}\r\n \r\n\r\nuseEffect(() => {\r\n   \r\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n    .then( response => response.json())\r\n    .then( data => {\r\n\r\n         // clever stuff here \r\n         const charData = buildChartData(data);\r\n         setData(charData);\r\n\r\n    });\r\n\r\n}, []) ;\r\n\r\n\r\n \r\n\r\n   \r\n    return (\r\n        <div>\r\n           <h1> I am a graph </h1>\r\n           <Line data={{\r\n               \r\n               datasets: [{\r\n                \r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor : \"#CC1034\" ,\r\n                data : data \r\n\r\n               }\r\n            ]\r\n           }}\r\n           \r\n           options={options}\r\n\r\n           />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph"]},"metadata":{},"sourceType":"module"}